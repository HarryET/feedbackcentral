-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Type: project_tier

-- DROP TYPE IF EXISTS public.project_tier;

CREATE TYPE public.project_tier AS ENUM
    ('free');

ALTER TYPE public.project_tier
    OWNER TO postgres;

-- Type: feedback_classification

-- DROP TYPE IF EXISTS public.feedback_classification;

CREATE TYPE public.feedback_classification AS ENUM
    ('positive', 'negative');

ALTER TYPE public.feedback_classification
    OWNER TO postgres;
    
CREATE OR REPLACE FUNCTION public.users_insert_trigger_fnc()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
AS $BODY$
BEGIN
    -- TODO Review once UI for auth is working
    if NEW.email IS NOT NULL then
        INSERT INTO public.users (id, username, login_methods)
        VALUES (NEW.id,
                NEW.email,
                ARRAY ['magic']);
        RETURN NEW;
    else
        INSERT INTO public.users (id, username, login_methods)
        VALUES (NEW.id,
                NEW.raw_user_meta_data ->> 'user_name',
                ARRAY ['twitter']);
        RETURN NEW;
    end if;
END;
$BODY$;

ALTER FUNCTION public.users_insert_trigger_fnc()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.users_insert_trigger_fnc() TO authenticated;

GRANT EXECUTE ON FUNCTION public.users_insert_trigger_fnc() TO postgres;

GRANT EXECUTE ON FUNCTION public.users_insert_trigger_fnc() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.users_insert_trigger_fnc() TO anon;

GRANT EXECUTE ON FUNCTION public.users_insert_trigger_fnc() TO service_role;

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default",
    last_name character varying(100) COLLATE pg_catalog."default",
    profile_picture text COLLATE pg_catalog."default",
    login_methods character varying(50)[] COLLATE pg_catalog."default" NOT NULL DEFAULT (ARRAY[]::character varying[])::character varying(50)[],
    CONSTRAINT users_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;

GRANT ALL ON TABLE public.users TO anon;

GRANT ALL ON TABLE public.users TO authenticated;

GRANT ALL ON TABLE public.users TO postgres;

GRANT ALL ON TABLE public.users TO service_role;

CREATE TABLE IF NOT EXISTS public.projects
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    owner_id uuid NOT NULL,
    enabled_integrations uuid[] NOT NULL DEFAULT ARRAY[]::uuid[],
    team uuid[] NOT NULL DEFAULT ARRAY[]::uuid[],
    tier project_tier NOT NULL DEFAULT 'free'::project_tier,
    flags integer NOT NULL DEFAULT 0,
    CONSTRAINT projects_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.projects
    OWNER to postgres;

GRANT ALL ON TABLE public.projects TO anon;

GRANT ALL ON TABLE public.projects TO authenticated;

GRANT ALL ON TABLE public.projects TO postgres;

GRANT ALL ON TABLE public.projects TO service_role;

CREATE TABLE IF NOT EXISTS public.feedback
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    content text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    source uuid NOT NULL,
    source_meta jsonb NOT NULL DEFAULT '{}'::jsonb,
    classification feedback_classification,
    CONSTRAINT feedback_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.feedback
    OWNER to postgres;

GRANT ALL ON TABLE public.feedback TO anon;

GRANT ALL ON TABLE public.feedback TO authenticated;

GRANT ALL ON TABLE public.feedback TO postgres;

GRANT ALL ON TABLE public.feedback TO service_role;

CREATE TABLE IF NOT EXISTS public.integrations
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    icon text COLLATE pg_catalog."default",
    CONSTRAINT integrations_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.integrations
    OWNER to postgres;

GRANT ALL ON TABLE public.integrations TO anon;

GRANT ALL ON TABLE public.integrations TO authenticated;

GRANT ALL ON TABLE public.integrations TO postgres;

GRANT ALL ON TABLE public.integrations TO service_role;

CREATE OR REPLACE VIEW public.feedback_ai_view
 AS
 SELECT feedback.content,
    feedback.classification
   FROM feedback;

ALTER TABLE public.feedback_ai_view
    OWNER TO postgres;

GRANT ALL ON TABLE public.feedback_ai_view TO authenticated;
GRANT ALL ON TABLE public.feedback_ai_view TO postgres;
GRANT ALL ON TABLE public.feedback_ai_view TO anon;
GRANT ALL ON TABLE public.feedback_ai_view TO service_role;
